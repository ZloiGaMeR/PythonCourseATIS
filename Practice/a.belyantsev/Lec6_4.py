# Часто задача программиста заключается в том, чтоб найти в документации готовую функцию, которая реализует необходимое решение.
# Данное задании предполагает самостоятельное изучение документации к библиотеке itertools (это набор готовых итераторов),
# чтобы подобрать те функции, которые дадут правильные ответы на следующие вопросы (иногда надо будет добавить свои аргументы
# при вызове функций помимо тех, что указаны в задании):
# Функция должна принимать три массива ([1, 2, 3], [4, 5], [6, 7]), а вернуть лишь один массив ([1, 2, 3, 4, 5, 6, 7])
# Функция принимает массив (['hello', 'i', 'write', 'cool', 'code']) и возвращает массив из элементов, у которых длина не меньше пяти (['hello', 'write'])
# Функция выдает на строку 'password' все возможные комбинации вида ([('p', 'a', 's', 's'), ('p', 'a', 's', 'w'), ('p', 'a', 's', 'o'), ...)
# Требуется написать код, который использует указанные входные данные и выводит на экран возвращаемое значение.
# Помните, что функции могут возвращать генератор, который нужно "развернуть" для вывода на экран.
import itertools

# Функция должна принимать три массива ([1, 2, 3], [4, 5], [6, 7]),
# а вернуть лишь один массив ([1, 2, 3, 4, 5, 6, 7])


def connection(*args):
    lst = itertools.chain(*args)
    return list(lst)


print(connection([1, 2, 3], [4, 5], [6, 7]))

# Функция принимает массив (['hello', 'i', 'write', 'cool', 'code']) и
# возвращает массив из элементов, у которых длина не меньше пяти (['hello', 'write'])


def len_controller(*args):
    lst = filter(lambda val: len(val) >= 5, *args)
    return list(lst)


print(len_controller(['hello', 'i', 'write', 'cool', 'code']))

# Функция выдает на строку 'password' все возможные комбинации вида
# ([('p', 'a', 's', 's'), ('p', 'a', 's', 'w'), ('p', 'a', 's', 'o'), ...)


def combination_gen(*args):
    lst = itertools.permutations(*args, 4)
    return list(lst)


print(combination_gen("password"))
